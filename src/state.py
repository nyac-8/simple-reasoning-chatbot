from typing import TypedDict, List, Dict, Any, Optional, Tuple, Annotated
from langchain_core.messages import BaseMessage


class State(TypedDict):
    """
    State schema for the reasoning chatbot.
    
    This TypedDict defines the structure of state that flows through the LangGraph workflow.
    Each field represents a specific aspect of the conversation and reasoning process.
    """
    
    session_id: Annotated[str, "Unique identifier for the entire conversation session"]
    thread_id: Annotated[str, "Unique identifier for a single question-answer interaction within a session"]
    
    messages: Annotated[List[BaseMessage], "Full conversation history including all previous messages in the current thread"]
    history: Annotated[List[Tuple[str, str]], "Persistent storage of (question, answer) pairs from completed threads"]
    
    reasoning_steps: Annotated[List[BaseMessage], "Collection of AIMessage objects containing reasoning thoughts (type='reasoning')"]
    ready_to_answer: Annotated[bool, "Flag indicating whether orchestrator has completed reasoning and is ready to hand off to writer"]
    
    context: Annotated[Dict[str, Any], "Extensible context dictionary for v2 features (document IDs, search params, etc.)"]
    tools: Annotated[List[Any], "Tool definitions for v2 - empty list in v1, will hold tool schemas in future versions"]
    
    final_answer: Annotated[Optional[str], "The polished response generated by the writer agent, None until writer completes"]
    
    current_question: Annotated[str, "The user's question currently being processed in this thread"]
    reasoning_count: Annotated[int, "Counter tracking the number of reasoning iterations performed by orchestrator"]